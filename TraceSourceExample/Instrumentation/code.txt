using System;
using TracingCore;
using TracingCore.TraceToPyDtos;

class TimePeriod
{
    private double _seconds;
    public double Hours
    {
        get
        {
            TraceApi.TraceMethodEntry(9, "get Hours", new VariableData("this", this, this.GetType()));
            TraceApi.TraceData(9);
            double __return_9 = _seconds / 3600;
            TraceApi.TraceMethodReturnExit(9, new VariableData("__return_9", __return_9, __return_9.GetType()));
            return __return_9;
        }

        set
        {
            TraceApi.TraceMethodEntry(10, "set Hours", new VariableData("value", value, value.GetType()), new VariableData("this", this, this.GetType()));
            TraceApi.TraceData(11);
            if (value < 0 || value > 24)
            {
                TraceApi.TraceData(12, new VariableData("value", value, value.GetType()));
                TraceApi.TraceData(12);
                throw new ArgumentOutOfRangeException($"{nameof(value)} must be between 0 and 24.");
            }

            _seconds = value * 3600;
            TraceApi.TraceData(15, new VariableData("_seconds", _seconds, _seconds.GetType()));
            TraceApi.TraceMethodExit(15, true);
        }
    }

    public double __Pre_Ins_Prop_Hours
    {
        get
        {
            return _seconds / 3600;
        }

        set
        {
            if (value < 0 || value > 24)
                throw new ArgumentOutOfRangeException($"{nameof(value)} must be between 0 and 24.");
            _seconds = value * 3600;
        }
    }

    static TimePeriod()
    {
        TraceApi.RegisterClassLoad("TimePeriod");
    }
}

class Program
{
    static void Main()
    {
        TraceApi.TraceMethodEntry(22, "Main");
        TraceApi.TraceData(24);
        TimePeriod t = new TimePeriod();
        TraceApi.TraceData(26, new VariableData("t", t, t.GetType()));
        // The property assignment causes the 'set' accessor to be called.
        t.Hours = 24;
        TraceApi.TraceData(29);
        // Retrieving the property causes the 'get' accessor to be called.
        Console.WriteLine($"Time in hours: {t.Hours}");
        TraceApi.TraceData(29);
        TraceApi.TraceMethodExit(29, true);
    }
}