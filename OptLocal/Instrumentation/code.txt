using System;
using TracingCore;
using TracingCore.TraceToPyDtos;

class TimePeriod
{
    private double _seconds;
    public double Hours
    {
        get
        {
            TraceApi.TraceMethodEntry(9, "get Hours", new VariableData("this", this, this.GetType()));
            TraceApi.TraceData(9, "get { return _seconds / 3600; }");
            double __return_9 = _seconds / 3600;
            TraceApi.TraceMethodReturnExit(9, "double __return_9=_seconds / 3600;", new VariableData("__return_9", __return_9, __return_9.GetType()));
            return __return_9;
        }

        set
        {
            TraceApi.TraceMethodEntry(10, "set Hours", new VariableData("this", this, this.GetType()));
            TraceApi.TraceData(11, "set { \n          if (value < 0 || value > 24)\n             throw new ArgumentOutOfRangeException(\n                   $\"{nameof(value)} must be between 0 and 24.\");\n\n          _seconds = value * 3600; \n       }");
            if (value < 0 || value > 24)
                throw new ArgumentOutOfRangeException($"{nameof(value)} must be between 0 and 24.");
            _seconds = value * 3600;
            TraceApi.TraceData(15, "_seconds = value * 3600;", new VariableData("_seconds", _seconds, _seconds.GetType()));
            TraceApi.TraceMethodExit(15, "set { \n          if (value < 0 || value > 24)\n             throw new ArgumentOutOfRangeException(\n                   $\"{nameof(value)} must be between 0 and 24.\");\n\n          _seconds = value * 3600; \n       }", null);
        }
    }

    public double __Pre_Ins_Prop_Hours
    {
        get
        {
            return _seconds / 3600;
        }

        set
        {
            if (value < 0 || value > 24)
                throw new ArgumentOutOfRangeException($"{nameof(value)} must be between 0 and 24.");
            _seconds = value * 3600;
        }
    }

    static TimePeriod()
    {
        TraceApi.RegisterClassLoad("TimePeriod");
    }
}

class Program
{
    static void Main()
    {
        TraceApi.TraceMethodEntry(22, "Main");
        TraceApi.TraceData(24, "static void Main()\n   {\n       TimePeriod t = new TimePeriod();\n       // The property assignment causes the 'set' accessor to be called.\n       t.Hours = 24;\n\n       // Retrieving the property causes the 'get' accessor to be called.\n       Console.WriteLine($\"Time in hours: {t.Hours}\");\n   }");
        TimePeriod t = new TimePeriod();
        TraceApi.TraceData(26, "TimePeriod t = new TimePeriod();", new VariableData("t", t, t.GetType()));
        // The property assignment causes the 'set' accessor to be called.
        t.Hours = 24;
        TraceApi.TraceData(29, "t.Hours = 24;");
        // Retrieving the property causes the 'get' accessor to be called.
        Console.WriteLine($"Time in hours: {t.Hours}");
        TraceApi.TraceData(29, "Console.WriteLine($\"Time in hours: {t.Hours}\");");
        TraceApi.TraceMethodExit(29, "static void Main()\n   {\n       TimePeriod t = new TimePeriod();\n       // The property assignment causes the 'set' accessor to be called.\n       t.Hours = 24;\n\n       // Retrieving the property causes the 'get' accessor to be called.\n       Console.WriteLine($\"Time in hours: {t.Hours}\");\n   }", null);
    }
}